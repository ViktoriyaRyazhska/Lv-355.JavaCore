package buttoms;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;;

public class XvsO {
	static JFrame jFrame = getFrame();
	static JPanel jPanel = new JPanel();
	static JButton b = new JButton();
	static int clickCount = 0;
	static JButton[] jButtons = new JButton[9];

	public static void main(String[] args) {
		jFrame.add(jPanel);
		for (int i = 0; i < jButtons.length; i++) {
			jButtons[i] = new JButton();
			jButtons[i].setPreferredSize(new Dimension(100, 100));
			jPanel.add(jButtons[i]);
		}

		JMenuBar jMenuBar = new JMenuBar();
		JMenu changeColor = new JMenu("Edit");
		jMenuBar.add(changeColor);
		changeColor.add(new JMenuItem("Buttom color")).addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Color color1 = JColorChooser.showDialog(jPanel, "What color do u want?", Color.white);
				jPanel.setForeground(color1);
				changeButtonColor(jButtons, color1);
			}
		});
		changeColor.add(new JMenuItem("Background color")).addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Color color2 = JColorChooser.showDialog(jPanel, "What color do u want?", Color.white);
				jPanel.setBackground(color2);
			}
		});
		jFrame.setJMenuBar(jMenuBar);
		jFrame.revalidate();

		for (JButton b : jButtons) {
			b.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent arg0) {
					putText(b);
					winner(jButtons);
				}
			});
		}

	}

	static void changeButtonColor(JButton[] jButtons, Color color) {
		for (int i = 0; i < jButtons.length; i++) {
			jButtons[i].setBackground(color);
		}
	}

	static void putText(JButton jButton) {
		if (clickCount % 2 == 0) {
			jButton.setText("X");
		} else {
			jButton.setText("O");
		}
		jButton.setFont(new Font("TimesRoman", Font.BOLD, 85));
		clickCount++;
		jButton.setEnabled(false);
	}

	static void winner(JButton[] jButtons) {
		boolean b = false;
		if ((jButtons[0].getText().equals(jButtons[1].getText())) && (jButtons[0].getText().equals(jButtons[2].getText())) && (!jButtons[0].getText().isEmpty())) {
			/*int answer =*/ JOptionPane.showConfirmDialog(jPanel, "Player " + jButtons[0].getText() + " is winner! Do u want to exit?", "Congradulation!", JOptionPane.YES_NO_OPTION);
//			if (answer == JOptionPane.YES_OPTION) {
//				System.exit(0);
//			} else {
//				System.exit(0);
//			}
			b=true;
		}
		if ((jButtons[3].getText().equals(jButtons[4].getText())) && (jButtons[3].getText().equals(jButtons[5].getText())) && (!jButtons[3].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[3].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		if ((jButtons[6].getText().equals(jButtons[7].getText())) && (jButtons[6].getText().equals(jButtons[7].getText())) && (!jButtons[6].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[6].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		if ((jButtons[0].getText().equals(jButtons[3].getText())) && (jButtons[0].getText().equals(jButtons[6].getText())) && (!jButtons[0].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[0].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		if ((jButtons[1].getText().equals(jButtons[4].getText())) && (jButtons[1].getText().equals(jButtons[7].getText())) && (!jButtons[1].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[1].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		if ((jButtons[2].getText().equals(jButtons[5].getText())) && (jButtons[2].getText().equals(jButtons[8].getText())) && (!jButtons[2].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[2].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		if ((jButtons[0].getText().equals(jButtons[4].getText())) && (jButtons[0].getText().equals(jButtons[8].getText())) && (!jButtons[0].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[0].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		if ((jButtons[2].getText().equals(jButtons[4].getText())) && (jButtons[2].getText().equals(jButtons[8].getText())) && (!jButtons[2].getText().isEmpty())) {
			JOptionPane.showMessageDialog(jPanel, "Player " + jButtons[2].getText() + " is winner", "Congradulation!", JOptionPane.ERROR_MESSAGE);
			b=true;
		}
		 if ((clickCount==9)&&(!b)) {
			JOptionPane.showMessageDialog(jPanel, "Draw!", "Congradulation!", JOptionPane.ERROR_MESSAGE);
		}
	}

	static JFrame getFrame() {
		JFrame jFrame = new JFrame() {
			private static final long serialVersionUID = 1L;
		};
		jFrame.setVisible(true);
		jFrame.setResizable(false);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jFrame.setBounds(-5, 0, 329, 372);
		jFrame.setTitle("XvsO");
		return jFrame;
	}
}