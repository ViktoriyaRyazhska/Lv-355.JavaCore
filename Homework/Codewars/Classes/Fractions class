public class Fraction implements Comparable<Fraction>
{
    private final long top;
    private final long bottom;

    public Fraction(long numerator, long denominator) {
        top = numerator;
        bottom = denominator;
    }

    @Override
    public int hashCode() { return 17 * Long.hashCode(top) + Long.hashCode(bottom); }    
    @Override
    public boolean equals(Object o) { return compareTo((Fraction)o) == 0; }    
    @Override
    public int compareTo(Fraction f2){ return Long.compare(top * f2.bottom, f2.top * bottom); }
    
    // Your work here!

    //Add two fractions
    public Fraction add(Fraction f2) {
      long top_ = top;
      long bottom_ = bottom;
      
      bottom_ = bottom * f2.bottom;
      top_ = top * f2.bottom + f2.top * bottom;
      
      long gcd = gcd(top_, bottom_);
      while(gcd != 1){
        top_ /= gcd;
        bottom_ /= gcd;
        gcd = gcd(top_, bottom_);
      }
      return new Fraction(top_, bottom_);
    }
    
    private long gcd(long a, long b) {
        if (b == 0) return a;
        long x = a % b;
        return gcd(b, x);
    }
    
    //...and make this class string representable
    @Override
    public String toString() {
        return top + "/" + bottom;
    }
    
}
